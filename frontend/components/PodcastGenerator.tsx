'use client'

import { useState, useEffect, useCallback } from 'react'
import Link from 'next/link'
import { Play, Loader2, CheckCircle, XCircle, Clock, Mic2, ListMusic, Settings, X } from 'lucide-react'
import StepByStepModal from './StepByStepModal'
import PricingModal from './PricingModal'
import ProPlanTooltip from './ProPlanTooltip'
import AdminCreditManager from './AdminCreditManager'
import { apiGet } from '@/backend/lib/api-client'

interface Podcast {
  id: string
  title: string
  description: string
  audioUrl?: string
  duration?: number
  status: string
  script?: string
  createdAt: string
  publishedAt?: string
  isAutoGenerated?: boolean
}

export default function PodcastGenerator() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [podcasts, setPodcasts] = useState<Podcast[]>([])
  const [showModal, setShowModal] = useState(false)
  const [showPricingModal, setShowPricingModal] = useState(false)
  const [showProPlanTooltip, setShowProPlanTooltip] = useState(false)
  const [showAdminManager, setShowAdminManager] = useState(false)
  const [credits, setCredits] = useState<number>(0)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [showTooltip, setShowTooltip] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [selectedPodcast, setSelectedPodcast] = useState<Podcast | null>(null)
  const [playbackRate, setPlaybackRate] = useState(1.0)

  // 페이지 로드 시 모달 상태 복구
  useEffect(() => {
    fetchPodcasts()
    fetchCredits()
    checkAdminPermission()
    
    // localStorage에서 모달 상태 복구
    const savedModalState = localStorage.getItem('podcast_modal_open')
    if (savedModalState === 'true') {
      setShowModal(true)
      setIsGenerating(true)
      console.log('🔄 모달 상태 복구: 열림')
    }

    // 1분마다 현재 시간 업데이트 (카운트다운용)
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 60000)

    return () => clearInterval(timer)
  }, [])

  const generatePodcast = useCallback(async () => {
    setIsGenerating(true)
    setShowModal(true)
    // 모달 상태 저장
    localStorage.setItem('podcast_modal_open', 'true')
    console.log('💾 모달 상태 저장: 열림')
  }, [])

  const handleModalComplete = useCallback((podcastId: string) => {
    setShowModal(false)
    setIsGenerating(false)
    // 모달 상태 제거
    localStorage.removeItem('podcast_modal_open')
    console.log('🗑️ 모달 상태 제거: 완료')
    fetchPodcasts()
    fetchCredits()
  }, [])

  const handleModalClose = useCallback(() => {
    setShowModal(false)
    setIsGenerating(false)
    // 모달 상태 제거
    localStorage.removeItem('podcast_modal_open')
    console.log('🗑️ 모달 상태 제거: 닫기')
  }, [])

  const fetchPodcasts = async () => {
    try {
      const { data } = await apiGet<Podcast[]>('/api/podcast')
      
      if (data) {
        setPodcasts(data)
      }
    } catch (error) {
      console.error('Error fetching podcasts:', error)
    }
  }

  const fetchCredits = async () => {
    try {
      const response = await fetch('/api/user/credits')
      if (response.ok) {
        const data = await response.json()
        setCredits(data.credits)
        
        // 크레딧이 10개 이하면 tooltip 표시
        if (data.credits <= 10 && data.credits > 0) {
          setShowTooltip(true)
          // 5초 후 tooltip 자동 숨김
          setTimeout(() => setShowTooltip(false), 5000)
        }
        
        // 크레딧이 0이면 Pro 플랜 툴팁 표시
        if (data.credits === 0) {
          setShowProPlanTooltip(true)
        }
      }
    } catch (error) {
      console.error('Error fetching credits:', error)
    }
  }

  const checkAdminPermission = async () => {
    try {
      const response = await fetch('/api/admin/check-permission')
      if (response.ok) {
        const data = await response.json()
        setIsAdmin(data.isAdmin)
      }
    } catch (error) {
      console.error('Error checking admin permission:', error)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return (
          <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-semibold bg-primary-100 text-brand">
            <CheckCircle className="w-3 h-3 mr-1" />
            완료
          </span>
        )
      case 'failed':
        return (
          <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-semibold bg-red-100 text-red-700">
            <XCircle className="w-3 h-3 mr-1" />
            실패
          </span>
        )
      case 'processing':
        return (
          <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700">
            <Loader2 className="w-3 h-3 mr-1 animate-spin" />
            처리중
          </span>
        )
      default:
        return (
          <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-700">
            대기중
          </span>
        )
    }
  }

  const formatDuration = (seconds?: number) => {
    if (!seconds) return '알 수 없음'
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const getTimeUntilPublish = (publishedAt: string) => {
    const publishTime = new Date(publishedAt)
    const diff = publishTime.getTime() - currentTime.getTime()
    
    if (diff <= 0) return null
    
    const hours = Math.floor(diff / (1000 * 60 * 60))
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
    
    if (hours > 0) {
      return `${hours}시간 ${minutes}분 후 공개`
    } else {
      return `${minutes}분 후 공개`
    }
  }

  const isPodcastPublished = (publishedAt?: string) => {
    if (!publishedAt) return true
    return new Date(publishedAt).getTime() <= currentTime.getTime()
  }

  const cleanScript = (script: string) => {
    let cleaned = script
    
    // 마크다운 헤더 제거 (# ## ### 등)
    cleaned = cleaned.replace(/^#+\s+/gm, '')
    
    // **굵은 글씨** 제거
    cleaned = cleaned.replace(/\*\*(.*?)\*\*/g, '$1')
    
    // *이탤릭* 제거
    cleaned = cleaned.replace(/\*(.*?)\*/g, '$1')
    
    // __굵은 글씨__ 제거
    cleaned = cleaned.replace(/__(.*?)__/g, '$1')
    
    // _이탤릭_ 제거
    cleaned = cleaned.replace(/_(.*?)_/g, '$1')
    
    // ~~취소선~~ 제거
    cleaned = cleaned.replace(/~~(.*?)~~/g, '$1')
    
    // [링크 텍스트](url) 형식 → 링크 텍스트만 남김
    cleaned = cleaned.replace(/\[(.*?)\]\(.*?\)/g, '$1')
    
    // [대괄호] 안의 텍스트 제거
    cleaned = cleaned.replace(/\[.*?\]/g, '')
    
    // `코드` 백틱 제거
    cleaned = cleaned.replace(/`([^`]+)`/g, '$1')
    
    // ```코드 블록``` 제거
    cleaned = cleaned.replace(/```[\s\S]*?```/g, '')
    
    // > 인용구 제거
    cleaned = cleaned.replace(/^>\s+/gm, '')
    
    // --- 또는 *** 구분선 제거
    cleaned = cleaned.replace(/^[-*]{3,}\s*$/gm, '')
    
    // 단독으로 있는 별표들 제거
    cleaned = cleaned.replace(/\*+/g, '')
    
    // 리스트 마커 제거 (-, *, +, 숫자.)
    cleaned = cleaned.replace(/^[\s]*[-*+]\s+/gm, '')
    cleaned = cleaned.replace(/^[\s]*\d+\.\s+/gm, '')
    
    // HTML 태그 제거
    cleaned = cleaned.replace(/<[^>]*>/g, '')
    
    // 중복 줄바꿈 정리 (3개 이상 → 2개)
    cleaned = cleaned.replace(/\n{3,}/g, '\n\n')
    
    // 각 줄의 앞뒤 공백 제거
    cleaned = cleaned.split('\n').map(line => line.trim()).join('\n')
    
    // 전체 앞뒤 공백 제거
    cleaned = cleaned.trim()
    
    return cleaned
  }

  return (
    <div className="px-4 py-6 space-y-6">
      {/* 크레딧 표시 */}
      <div className="relative">
        <div 
          className="app-card p-4 bg-gradient-to-r from-amber-50 to-amber-100 border border-amber-200 fade-in cursor-pointer hover:shadow-lg transition-all"
          onClick={() => setShowPricingModal(true)}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-br from-amber-400 to-amber-500 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">💳</span>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-900">남은 크레딧</p>
                <p className="text-xs text-gray-600">매일 자동으로 팟캐스트를 생성합니다</p>
              </div>
            </div>
          <div className="text-right">
            <div className="flex items-center space-x-2">
              <p className="text-2xl font-bold text-amber-600">{credits}</p>
              <p className="text-xs text-gray-500">개</p>
              {isAdmin && (
                <button
                  onClick={() => setShowAdminManager(true)}
                  className="w-8 h-8 bg-blue-500 hover:bg-blue-600 rounded-lg flex items-center justify-center transition-colors"
                  title="관리자 크레딧 관리"
                >
                  <Settings className="w-4 h-4 text-white" />
                </button>
              )}
            </div>
          </div>
          </div>
          {credits === 0 && (
            <div className="mt-3 p-2 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-xs text-red-700">⚠️ 크레딧이 부족합니다. 팟캐스트를 생성할 수 없습니다.</p>
            </div>
          )}
        </div>

        {/* Tooltip - 담백한 스타일 */}
        {showTooltip && credits <= 10 && credits > 0 && (
          <div className="absolute top-full left-0 right-0 mt-2 z-10 px-2">
            <div className="bg-white border border-gray-300 rounded-lg shadow-lg px-4 py-3">
              <div className="flex items-start space-x-3">
                <div className="flex-1 min-w-0">
                  <p className="font-medium mb-1 text-gray-900">크레딧이 얼마 남지 않았어요</p>
                  <p className="text-sm text-gray-600">클릭해서 플랜을 확인하세요</p>
                </div>
                <button 
                  onClick={(e) => {
                    e.stopPropagation()
                    setShowTooltip(false)
                  }}
                  className="w-6 h-6 flex items-center justify-center rounded hover:bg-gray-100 transition-colors flex-shrink-0"
                  aria-label="닫기"
                >
                  <X className="w-4 h-4 text-gray-500" />
                </button>
              </div>
              {/* 화살표 */}
              <div className="absolute -top-1 left-6 w-2 h-2 bg-white border-l border-t border-gray-300 rotate-45"></div>
            </div>
          </div>
        )}
      </div>


      {/* 팟캐스트 목록 */}
      <div className="fade-in">
        <div className="flex items-center space-x-2 mb-4 px-2">
          <ListMusic className="w-5 h-5 text-gray-600" />
          <h3 className="text-lg font-bold text-gray-900">내 팟캐스트</h3>
          <span className="text-sm text-gray-500">({podcasts.length})</span>
        </div>
        
        {podcasts.length === 0 ? (
          <div className="app-card p-8 text-center">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
              <Mic2 className="w-8 h-8 text-gray-400" />
            </div>
            <p className="text-gray-500 text-sm">아직 생성된 팟캐스트가 없습니다.</p>
            <p className="text-gray-400 text-xs mt-1">위 버튼을 눌러 첫 팟캐스트를 만들어보세요!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {podcasts.map((podcast) => (
              <button
                key={podcast.id}
                onClick={() => {
                  if (podcast.status === 'completed' && podcast.audioUrl && isPodcastPublished(podcast.publishedAt)) {
                    setSelectedPodcast(podcast)
                  }
                }}
                disabled={podcast.status !== 'completed' || !podcast.audioUrl || !isPodcastPublished(podcast.publishedAt)}
                className="app-card p-4 hover:shadow-lg transition-all text-left disabled:opacity-60 disabled:cursor-not-allowed"
              >
                <div className="flex items-center space-x-4">
                  {/* 앨범 커버 스타일 썸네일 */}
                  <div className="w-16 h-16 bg-gradient-to-br from-brand to-brand-light rounded-lg flex-shrink-0 flex items-center justify-center shadow-md">
                    <Mic2 className="w-8 h-8 text-white" />
                  </div>
                  
                  {/* 제목 및 상태 */}
                  <div className="flex-1 min-w-0">
                    <h4 className="font-bold text-gray-900 mb-1 truncate">{podcast.title}</h4>
                    <div className="flex items-center space-x-2">
                      {getStatusBadge(podcast.status)}
                      {podcast.duration && podcast.status === 'completed' && (
                        <span className="text-xs text-gray-500">
                          {formatDuration(podcast.duration)}
                        </span>
                      )}
                    </div>
                  </div>
                  
                  {/* 재생 아이콘 */}
                  {podcast.status === 'completed' && podcast.audioUrl && isPodcastPublished(podcast.publishedAt) && (
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-brand rounded-full flex items-center justify-center">
                        <Play className="w-4 h-4 text-white ml-0.5" />
                      </div>
                    </div>
                  )}
                </div>
              </button>
            ))}
          </div>
        )}
      </div>

      <StepByStepModal
        isOpen={showModal}
        onClose={handleModalClose}
        onComplete={handleModalComplete}
      />

      <PricingModal
        isOpen={showPricingModal}
        onClose={() => setShowPricingModal(false)}
      />

      <ProPlanTooltip
        isVisible={showProPlanTooltip}
        onClose={() => setShowProPlanTooltip(false)}
        credits={credits}
      />

      <AdminCreditManager
        isVisible={showAdminManager}
        onClose={() => setShowAdminManager(false)}
      />

      {/* 스포티파이 스타일 플레이어 모달 */}
      {selectedPodcast && (
        <div className="fixed inset-0 z-50 flex items-start justify-center pt-4 p-0 sm:p-4 pointer-events-none">
          <div className="w-full sm:max-w-2xl bg-gradient-to-b from-gray-900 to-black text-white rounded-3xl shadow-2xl max-h-[90vh] flex flex-col animate-slide-up pointer-events-auto">
            {/* 헤더 */}
            <div className="p-6 border-b border-gray-800 flex items-center justify-between flex-shrink-0">
              <h3 className="text-xl font-bold truncate pr-4">{selectedPodcast.title}</h3>
              <button
                onClick={() => setSelectedPodcast(null)}
                className="w-10 h-10 rounded-full bg-gray-800 hover:bg-gray-700 flex items-center justify-center transition-colors flex-shrink-0"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* 앨범 커버 */}
            <div className="p-8 flex justify-center flex-shrink-0">
              <div className="w-64 h-64 bg-gradient-to-br from-brand to-brand-light rounded-2xl shadow-2xl flex items-center justify-center">
                <Mic2 className="w-32 h-32 text-white" />
              </div>
            </div>

            {/* 오디오 플레이어 */}
            <div className="px-6 pb-6 flex-shrink-0">
              <audio
                key={selectedPodcast.id}
                controls
                className="w-full"
                style={{
                  filter: 'invert(1) hue-rotate(180deg)',
                  borderRadius: '12px'
                }}
                onRateChange={(e) => {
                  const audio = e.target as HTMLAudioElement
                  audio.playbackRate = playbackRate
                }}
                ref={(audio) => {
                  if (audio) {
                    audio.playbackRate = playbackRate
                  }
                }}
              >
                <source src={selectedPodcast.audioUrl} type="audio/mpeg" />
              </audio>

              {/* 배속 조절 */}
              <div className="mt-4 flex items-center justify-center space-x-2">
                <span className="text-sm text-gray-400">배속</span>
                {[0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0].map((rate) => (
                  <button
                    key={rate}
                    onClick={() => {
                      setPlaybackRate(rate)
                      const audio = document.querySelector('audio')
                      if (audio) {
                        audio.playbackRate = rate
                      }
                    }}
                    className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all ${
                      playbackRate === rate
                        ? 'bg-brand text-white'
                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                    }`}
                  >
                    {rate}x
                  </button>
                ))}
              </div>
            </div>

            {/* 스크립트 */}
            {selectedPodcast.script && (
              <div className="flex-1 overflow-y-auto px-6 pb-6">
                <div className="bg-gray-800/50 rounded-xl p-4">
                  <h4 className="text-sm font-bold text-gray-300 mb-3">스크립트</h4>
                  <div className="text-sm text-gray-300 leading-relaxed whitespace-pre-wrap">
                    {cleanScript(selectedPodcast.script)}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}
