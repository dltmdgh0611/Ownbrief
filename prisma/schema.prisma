// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  podcasts          Podcast[]
  briefings         Briefing[]
  userSettings      UserSettings?
  userPersona       UserPersona?
  connectedServices ConnectedService[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Podcast {
  id              String    @id @default(cuid())
  title           String
  description     String?
  audioUrl        String?
  duration        Int?      // duration in seconds
  status          String    @default("pending") // pending, processing, completed, failed
  script          String
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedAt     DateTime? // 공개 예정 시간
  isAutoGenerated Boolean   @default(false) // 자동 생성 여부
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credits       Int      @default(15) // 남은 크레딧 수
  isAdmin       Boolean  @default(false) // 관리자 권한
  referralCode  String?  @unique // 사용자 고유 추천인 코드 (8자 영숫자)
  referredBy    String?  // 추천인 코드 (누가 이 사용자를 초대했는지)
  referralCount Int      @default(0) // 추천한 사람 수
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserPersona {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  persona   Json // AI 생성 페르소나 (업무 스타일, 선호도 등)
  interests String[] // 자동 추출된 관심사
  workStyle String? // "morning-person", "night-owl", "flexible" 등
  confirmed Boolean  @default(false) // 사용자 확인 여부
  feedback  Json? // 사용자 피드백
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConnectedService {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceName  String // "google", "slack", "notion"
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  metadata     Json? // 서비스별 추가 정보
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, serviceName])
}

model Briefing {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  script      String   @db.Text
  audioUrl    String?
  duration    Int? // 초 단위
  dataSources Json // 사용된 데이터 소스 정보
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
}
